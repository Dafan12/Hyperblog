cd cambiar directorio
clear limpiar terminal
mkdir crear carpeta
touch crear archivo vacio
ls listar documentos
cd .. devolverse a la carpeta anterior
cat accede al contenido de un archivo y lo muestra en la terminal
history muestra toda la historia de comandos
rm borra archivo
git init para inicializar
git status se ve el estado del proyecto en este momento
git add . incluye los archivos para git los persiga, pasa de la ram a la staging(memoria ram del git)
git rm --cached es para volver al estado anterior del add
git commit -m "mensaje" envia cambios al repositorio 
git diff version nueva version antigua se usa para comparar
git log permite ver la historia de los commit
git reset direccionanterior --hard(todo) o --soft(todo pero no modifica el staging) permite volver a una version anterior y no se puede volver atras
git checkout direcciondeseada archivo permite volver a ese versión pero permite regresar a la ultima version
git checkout master archivo permite volver a la ultima versión
git reset HEAD comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Básicamente, git fetch y git merge al mismo tiempo.
git branch rama ; git checkout -b rama crear una rama
git reset id-commit ; git checkout rama-o-id-commit movernos en el tiempo a cualquier otro commit de cualquier otra rama con los comandos
git pull origin master --allow-unrelated-histories Traer la versión del repositorio remoto y hacer merge para crear un commit con los archivos de ambas partes. Podemos usar git fetch y git merge o solo el git pull con el fla allow-unrelated-histories:
git push origin master los cambios de nuestro repositorio local en GitHub
para salir en git bush es esc shift zz ó q

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

ssh-keygen -t rsa -b 4096 -C "tu@email.com" Generar tus llaves SSH
eval $(ssh-agent -s) Encender el "servidor" de llaves SSH de tu computadora
ssh-add ~/.ssh/id_rsa (ruta-donde-guardaste-tu-llave-privada) Añadir tu llave SSH a este "servidor"
 